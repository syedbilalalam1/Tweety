<!DOCTYPE html>
<html>
<head>
    <title>{{title}}</title>
    <!-- Remove integrity check and use a different CDN -->
    <link href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <!-- Enhanced base styles -->
    <style>
        body {
            background-color: #f3f4f6;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
        }

        .button-fallback {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            margin: 0.5rem;
            border-radius: 0.375rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .pause-button { 
            background-color: #EAB308; 
            color: white;
            border: 2px solid #CA8A04;
        }
        .pause-button:hover { 
            background-color: #CA8A04; 
        }

        .reset-button { 
            background-color: #EF4444; 
            color: white;
            border: 2px solid #DC2626;
        }
        .reset-button:hover { 
            background-color: #DC2626; 
        }

        .generate-button { 
            background-color: #8B5CF6; 
            color: white;
            border: 2px solid #7C3AED;
        }
        .generate-button:hover { 
            background-color: #7C3AED; 
        }

        .card {
            background-color: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 1rem;
        }

        .grid {
            display: grid;
            gap: 1rem;
        }

        .grid-cols-4 {
            grid-template-columns: repeat(4, 1fr);
        }

        .grid-cols-6 {
            grid-template-columns: repeat(6, 1fr);
        }

        .timer-card {
            background-color: #f9fafb;
            border-radius: 0.5rem;
            padding: 1rem;
            text-align: center;
        }

        .timer-value {
            font-family: monospace;
            font-size: 1.25rem;
            margin-top: 0.5rem;
        }

        .status-message {
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }

        .status-success {
            background-color: #ecfdf5;
            color: #065f46;
        }

        .status-error {
            background-color: #fef2f2;
            color: #991b1b;
        }

        .status-warning {
            background-color: #fffbeb;
            color: #92400e;
        }

        .flex {
            display: flex;
        }

        .justify-between {
            justify-content: space-between;
        }

        .items-center {
            align-items: center;
        }

        .font-bold {
            font-weight: 700;
        }

        .text-3xl {
            font-size: 1.875rem;
            line-height: 2.25rem;
        }

        .mb-8 {
            margin-bottom: 2rem;
        }

        .space-x-4 > * + * {
            margin-left: 1rem;
        }

        .brand-header {
            background: linear-gradient(135deg, #1a237e 0%, #0d47a1 100%);
            color: white;
            padding: 1.5rem 0;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .brand-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .brand-link {
            color: #64b5f6;
            text-decoration: none;
            transition: color 0.2s;
        }

        .brand-link:hover {
            color: #90caf9;
            text-decoration: underline;
        }

        .brand-subtitle {
            color: #bbdefb;
            font-size: 1.1rem;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Brand Header -->
    <div class="brand-header">
        <div class="brand-container">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold">PersonalTweety Dashboard</h1>
                    <p class="brand-subtitle">
                        Created by <a href="https://bilalsworld.onrender.com/" target="_blank" class="brand-link">Syed Bilal Alam</a>
                    </p>
                </div>
                <div class="flex items-center space-x-4">
                    <a href="https://bilalsworld.onrender.com/" target="_blank" 
                       class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
                        Portfolio
                    </a>
                    <a href="/auth/logout" 
                       class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors">
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4 py-8">
        <!-- Control Buttons -->
        <div class="flex justify-end gap-4 mb-8">
            <button id="generateTweetButton" onclick="generateTrendingTweet()" 
                    class="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors">
                Generate Random Tweet
            </button>
            <button id="refreshTrendsButton" onclick="refreshTrends()" 
                    class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
                Refresh Trends
            </button>
            <button id="testModeButton" onclick="enableTestMode()" 
                    class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors">
                Enable 30s Test
            </button>
            <button id="pauseButton" onclick="togglePause()" 
                    class="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition-colors">
                Pause
            </button>
            <button id="resetButton" onclick="resetSequence()" 
                    class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors">
                Reset
            </button>
        </div>

        <!-- Next Trending Tweet Schedule -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-xl font-semibold mb-4">Next Trending Tweet Schedule</h2>
            <div class="grid grid-cols-4 gap-4">
                <div class="text-center p-4 rounded-lg" id="pakistanTimerCard">
                    <div class="font-semibold mb-2">Pakistan</div>
                    <div id="pakistanTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="usaTimerCard">
                    <div class="font-semibold mb-2">United States</div>
                    <div id="usaTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="japanTimerCard">
                    <div class="font-semibold mb-2">Japan</div>
                    <div id="japanTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="indiaTimerCard">
                    <div class="font-semibold mb-2">India</div>
                    <div id="indiaTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="indonesiaTimerCard">
                    <div class="font-semibold mb-2">Indonesia</div>
                    <div id="indonesiaTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="ukTimerCard">
                    <div class="font-semibold mb-2">United Kingdom</div>
                    <div id="ukTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="brazilTimerCard">
                    <div class="font-semibold mb-2">Brazil</div>
                    <div id="brazilTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="turkeyTimerCard">
                    <div class="font-semibold mb-2">Turkey</div>
                    <div id="turkeyTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="mexicoTimerCard">
                    <div class="font-semibold mb-2">Mexico</div>
                    <div id="mexicoTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="franceTimerCard">
                    <div class="font-semibold mb-2">France</div>
                    <div id="franceTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="saudiTimerCard">
                    <div class="font-semibold mb-2">Saudi Arabia</div>
                    <div id="saudiTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="canadaTimerCard">
                    <div class="font-semibold mb-2">Canada</div>
                    <div id="canadaTimer" class="text-lg font-mono">--:--:--</div>
                </div>
            </div>
        </div>

        <!-- Random Tweet Schedule -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-xl font-semibold mb-4">Random Tweet Schedule (6 per day)</h2>
            <div class="grid grid-cols-6 gap-4" id="randomTweetSchedule">
                <!-- Will be populated by JavaScript -->
            </div>
        </div>

        <!-- Current Trending Topics -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">Current Trending Topics</h2>
            <div class="grid grid-cols-4 gap-4" id="trendingTopics">
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Pakistan</h3>
                    <div id="pakistanTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">United States</h3>
                    <div id="usaTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Japan</h3>
                    <div id="japanTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">India</h3>
                    <div id="indiaTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Indonesia</h3>
                    <div id="indonesiaTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">United Kingdom</h3>
                    <div id="ukTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Brazil</h3>
                    <div id="brazilTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Turkey</h3>
                    <div id="turkeyTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Mexico</h3>
                    <div id="mexicoTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">France</h3>
                    <div id="franceTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Saudi Arabia</h3>
                    <div id="saudiTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Canada</h3>
                    <div id="canadaTrend" class="text-sm">Loading...</div>
                </div>
            </div>
        </div>

        <!-- Status Messages -->
        <div id="statusMessage" class="hidden mb-4 p-4 rounded"></div>
        
        <!-- Tweet History -->
        <div class="grid grid-cols-1 gap-6">
            {{#if tweets.length}}
                {{#each tweets}}
                <div class="bg-white rounded-lg shadow p-6 {{#if (eq status 'failed')}}border-l-4 border-red-500{{else}}border-l-4 border-green-500{{/if}}">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <span class="text-sm text-gray-500">{{timestamp}}</span>
                            {{#if country}}
                            <span class="ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded">{{country}}</span>
                            {{/if}}
                        </div>
                        <span class="px-2 py-1 text-sm rounded {{#if (eq status 'failed')}}bg-red-100 text-red-800{{else}}bg-green-100 text-green-800{{/if}}">
                            {{status}}
                        </span>
                    </div>
                    
                    <div class="mb-4">
                        <h3 class="text-lg font-semibold mb-2">Tweet Content</h3>
                        <pre class="bg-gray-50 p-4 rounded whitespace-pre-wrap">{{content}}</pre>
                    </div>

                    {{#if error}}
                    <div class="mt-4 p-4 bg-red-50 rounded">
                        <h4 class="text-red-800 font-semibold">Error</h4>
                        <p class="text-red-600">{{error}}</p>
                    </div>
                    {{/if}}

                    <div class="mt-4 flex gap-2">
                        <span class="px-2 py-1 text-sm bg-blue-100 text-blue-800 rounded">
                            {{type}}
                        </span>
                        {{#if hashtag}}
                        <span class="px-2 py-1 text-sm bg-purple-100 text-purple-800 rounded">
                            {{hashtag}}
                        </span>
                        {{/if}}
                    </div>
                </div>
                {{/each}}
            {{else}}
                <div class="bg-white rounded-lg shadow p-6 text-center">
                    <p class="text-gray-500">No tweets generated yet. Use the buttons above to generate tweets or wait for the scheduled generation.</p>
                </div>
            {{/if}}
        </div>
    </div>

    <script>
        // Add formatTime function at the beginning of the script
        function formatTime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const remainingSeconds = seconds % 60;
            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
        }

        const countrySchedule = [
            { name: 'Pakistan', id: 'pakistan' },
            { name: 'United States', id: 'usa' },
            { name: 'Japan', id: 'japan' },
            { name: 'India', id: 'india' },
            { name: 'Indonesia', id: 'indonesia' },
            { name: 'United Kingdom', id: 'uk' },
            { name: 'Brazil', id: 'brazil' },
            { name: 'Turkey', id: 'turkey' },
            { name: 'Mexico', id: 'mexico' },
            { name: 'France', id: 'france' },
            { name: 'Saudi Arabia', id: 'saudi' },
            { name: 'Canada', id: 'canada' }
        ];

        // Get state from backend
        async function getState() {
            try {
                const response = await fetch('/dashboard/state');
                if (!response.ok) {
                    throw new Error('Failed to fetch state');
                }
                return response.json();
            } catch (error) {
                console.error('Error fetching state:', error);
                throw error;
            }
        }

        // Update backend state
        async function updateState(updates) {
            try {
                const response = await fetch('/dashboard/state/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updates),
                });
                if (!response.ok) {
                    throw new Error('Failed to update state');
                }
                return response.json();
            } catch (error) {
                console.error('Error updating state:', error);
                throw error;
            }
        }

        // Update timers function to use backend state
        async function updateTimers() {
            try {
                const state = await getState();
                const now = new Date().getTime();
                const startTime = state.startTime;
                const currentIndex = state.currentCountryIndex;
                const tweetHistory = await fetch('/api/tweet-history').then(r => r.json());
                
                if (!startTime) {
                    await updateState({ startTime: null });
                    return;
                }

                countrySchedule.forEach((country, index) => {
                    const timerElement = document.getElementById(`${country.id}Timer`);
                    const cardElement = document.getElementById(`${country.id}TimerCard`);
                    
                    if (!timerElement || !cardElement) return;

                    // Reset all card styles first
                    cardElement.classList.remove('bg-yellow-50', 'bg-blue-50', 'bg-gray-50', 'bg-red-50', 'bg-green-50');

                    // Calculate time left for this country
                    const hoursOffset = index - currentIndex;
                    const targetTime = startTime + (hoursOffset * 3600000);
                    const timeLeft = Math.max(0, Math.floor((targetTime - now) / 1000));

                    // Check if this country has a tweet in recent history
                    const recentTweet = tweetHistory?.find(tweet => 
                        tweet.country === country.name && 
                        tweet.type === 'trend' &&
                        new Date(tweet.timestamp).getTime() > startTime
                    );

                    // Set background color based on tweet status
                    if (recentTweet) {
                        // If there's a tweet, show green for success or red for error
                        cardElement.classList.add(recentTweet.status === 'success' ? 'bg-green-50' : 'bg-red-50');
                    } else {
                        // If no tweet, show blue background
                        cardElement.classList.add('bg-blue-50');
                    }

                    // Then, handle the display content
                    if (index < currentIndex) {
                        // For countries that should have already tweeted
                        if (recentTweet) {
                            timerElement.textContent = recentTweet.status === 'success' ? 'Posted' : 'Error';
                            timerElement.classList.remove('text-yellow-600', 'text-blue-600', 'text-gray-600');
                            timerElement.classList.add(recentTweet.status === 'success' ? 'text-green-600' : 'text-red-600');
                        } else {
                            timerElement.textContent = 'Error';
                            timerElement.classList.remove('text-yellow-600', 'text-blue-600', 'text-green-600');
                            timerElement.classList.add('text-red-600');
                        }
                    } else if (index === currentIndex) {
                        // For the current country
                        if (recentTweet) {
                            timerElement.textContent = recentTweet.status === 'success' ? 'Posted' : 'Error';
                            timerElement.classList.remove('text-yellow-600', 'text-blue-600', 'text-gray-600');
                            timerElement.classList.add(recentTweet.status === 'success' ? 'text-green-600' : 'text-red-600');
                        } else {
                            const hours = Math.floor(timeLeft / 3600);
                            const minutes = Math.floor((timeLeft % 3600) / 60);
                            const seconds = timeLeft % 60;
                            timerElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                            timerElement.classList.remove('text-green-600', 'text-red-600', 'text-yellow-600', 'text-gray-600');
                            timerElement.classList.add('text-blue-600');
                        }
                    } else {
                        // For upcoming countries
                        const hours = Math.floor(timeLeft / 3600);
                        const minutes = Math.floor((timeLeft % 3600) / 60);
                        const seconds = timeLeft % 60;
                        timerElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                        timerElement.classList.remove('text-green-600', 'text-red-600', 'text-blue-600');
                        timerElement.classList.add('text-yellow-600');
                    }
                });
            } catch (error) {
                console.error('Error updating timers:', error);
            }
        }

        // Update random tweet schedule display using backend state
        async function updateRandomTweetSchedule() {
            try {
                const state = await getState();
                const schedule = state.randomSchedule;
                const container = document.getElementById('randomTweetSchedule');
                const now = new Date();
                
                container.innerHTML = '';
                
                schedule.forEach((tweet, index) => {
                    const div = document.createElement('div');
                    div.className = 'text-center p-4 rounded-lg';
                    
                    if (tweet.posted) {
                        div.classList.add('bg-green-50', 'border', 'border-green-500');
                        div.innerHTML = `
                            <div class="font-semibold mb-2">Random ${index + 1}</div>
                            <div class="text-green-600 font-semibold">Posted</div>
                            <div class="text-xs text-gray-500 mt-1">${tweet.scheduledTime}</div>
                        `;
                    } else {
                        const tweetTime = new Date(tweet.time);
                        
                        if (tweetTime < now) {
                            div.classList.add('bg-green-50', 'border', 'border-green-500');
                            div.innerHTML = `
                                <div class="font-semibold mb-2">Random ${index + 1}</div>
                                <div class="text-green-600 font-semibold">Just Posted</div>
                                <div class="text-xs text-gray-500 mt-1">${tweet.scheduledTime}</div>
                            `;
                        } else {
                            const remainingTime = tweetTime.getTime() - now.getTime();
                            const hours = Math.floor(remainingTime / (1000 * 60 * 60));
                            const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
                            const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);
                            
                            div.classList.add('bg-gray-50');
                            div.innerHTML = `
                                <div class="font-semibold mb-2">Random ${index + 1}</div>
                                <div class="text-lg font-mono">${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}</div>
                                <div class="text-xs text-gray-500 mt-1">${tweet.scheduledTime}</div>
                            `;
                        }
                    }
                    
                    container.appendChild(div);
                });
            } catch (error) {
                console.error('Error updating random tweet schedule:', error);
            }
        }

        // Initialize timers and state
        async function initializeDashboard() {
            try {
                const state = await getState();
                if (!state.startTime) {
                    // If no start time is set, set it to next hour
                    const now = new Date();
                    const nextHour = new Date(now);
                    nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
                    
                    await updateState({
                        startTime: nextHour.getTime(),
                        currentCountryIndex: 0
                    });
                }
                
                // Start the timer updates
                updateTimers();
                setInterval(updateTimers, 1000);
                
                // Start the random schedule updates
                updateRandomTweetSchedule();
                setInterval(updateRandomTweetSchedule, 60000);

                // Load initial trends
                await loadTrends();
                // Refresh trends every 5 minutes
                setInterval(loadTrends, 300000);
            } catch (error) {
                console.error('Error initializing dashboard:', error);
            }
        }

        // Call initialization when page loads
        document.addEventListener('DOMContentLoaded', initializeDashboard);

        async function loadTrends() {
            try {
                const response = await axios.get('/api/trends');
                
                if (response.data.error) {
                    console.error('Failed to fetch trends:', response.data.error);
                    showTrendError(response.data.error);
                    return;
                }

                updateTrendDisplay(response.data);
            } catch (error) {
                console.error('Error loading trends:', error);
                showTrendError('Failed to fetch trends. Please try again later.');
            }
        }

        function updateTrendDisplay(trends) {
            countrySchedule.forEach(country => {
                const trendElement = document.getElementById(`${country.id}Trend`);
                if (!trendElement) return;

                const trend = trends[country.id];
                if (!trend) {
                    trendElement.textContent = 'No trends available';
                    trendElement.classList.add('text-yellow-600');
                    return;
                }

                if (trend.error) {
                    trendElement.textContent = trend.error;
                    trendElement.classList.add('text-yellow-600');
                    return;
                }

                if (trend.name === 'Refreshing trends...') {
                    trendElement.textContent = 'Refreshing trends...';
                    trendElement.classList.add('text-blue-600');
                    return;
                }

                // Clear any previous styling
                trendElement.classList.remove('text-yellow-600', 'text-red-600', 'text-blue-600');
                
                // Display the trend
                let trendHtml = trend.name;
                if (trend.volume && trend.volume > 0) {
                    trendHtml += `<div class="text-xs text-gray-500 mt-1">Volume: ${trend.volume.toLocaleString()}</div>`;
                }
                trendElement.innerHTML = trendHtml;
            });
        }

        function showTrendError(message) {
            countrySchedule.forEach(country => {
                const trendElement = document.getElementById(`${country.id}Trend`);
                if (trendElement) {
                    trendElement.textContent = message || 'Error fetching trends';
                    trendElement.classList.remove('text-yellow-600', 'text-blue-600');
                    trendElement.classList.add('text-red-600');
                }
            });
        }

        async function generateTrendingTweet() {
            try {
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.className = 'mb-4 p-4 rounded';
                statusDiv.classList.remove('hidden');
                statusDiv.classList.add('bg-blue-100', 'text-blue-800');
                statusDiv.textContent = 'Generating random tweet...';

                const button = document.getElementById('generateTweetButton');
                button.disabled = true;
                button.classList.add('opacity-50', 'cursor-not-allowed');

                const response = await axios.post('/api/generate/random');
                
                if (response.data.success) {
                    statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                    statusDiv.classList.add('bg-green-100', 'text-green-800');
                    statusDiv.textContent = response.data.message || 'Tweet generated successfully!';
                    
                    // Refresh the page after 2 seconds to show the new tweet
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    throw new Error(response.data.message || 'Failed to generate tweet');
                }
            } catch (error) {
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.className = 'mb-4 p-4 rounded bg-red-100 text-red-800';
                statusDiv.classList.remove('hidden');
                statusDiv.textContent = 'Failed to generate tweet: ' + (error.response?.data?.message || error.message);
            } finally {
                // Re-enable the button after 1 minute
                setTimeout(() => {
                    const button = document.getElementById('generateTweetButton');
                    button.disabled = false;
                    button.classList.remove('opacity-50', 'cursor-not-allowed');
                }, 60000);
            }
        }

        // Add test mode functions
        async function enableTestMode() {
            const statusDiv = document.getElementById('statusMessage');
            const testButton = document.getElementById('testModeButton');
            
            try {
                const now = new Date();
                const currentStartTime = await getState();
                
                if (!currentStartTime) {
                    throw new Error('No active sequence');
                }

                // Set new start time to 30 seconds from now
                const newStartTime = now.getTime() + 30000; // 30 seconds
                await updateState({ startTime: newStartTime });
                
                // Update button state
                testButton.textContent = 'Test Mode Active';
                testButton.classList.remove('bg-green-500', 'hover:bg-green-600');
                testButton.classList.add('bg-orange-500', 'hover:bg-orange-600');
                testButton.disabled = true;
                
                // Show status message
                statusDiv.className = 'mb-4 p-4 rounded bg-orange-100 text-orange-800';
                statusDiv.classList.remove('hidden');
                statusDiv.textContent = 'Test mode activated: Current timer reduced to 30 seconds';

                // Generate initial tweet for current country
                try {
                    const response = await axios.post('/api/generate/trend');
                    if (!response.data.success) {
                        throw new Error(response.data.message || 'Failed to generate tweet');
                    }
                } catch (error) {
                    console.error('Failed to generate initial test tweet:', error);
                }
                
                // Set timer for the next tweet after 30 seconds
                setTimeout(async () => {
                    try {
                        // Generate the next tweet
                        const response = await axios.post('/api/generate/trend');
                        if (!response.data.success) {
                            throw new Error(response.data.message || 'Failed to generate tweet');
                        }
                        
                        // Reset button state
                        testButton.textContent = 'Enable 30s Test';
                        testButton.classList.remove('bg-orange-500', 'hover:bg-orange-600');
                        testButton.classList.add('bg-green-500', 'hover:bg-green-600');
                        testButton.disabled = false;
                        
                        // Show success message
                        statusDiv.className = 'mb-4 p-4 rounded bg-green-100 text-green-800';
                        statusDiv.textContent = 'Test mode completed successfully';
                        
                        // Refresh the page after a short delay
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } catch (error) {
                        console.error('Failed to generate test tweet:', error);
                        statusDiv.className = 'mb-4 p-4 rounded bg-red-100 text-red-800';
                        statusDiv.textContent = 'Failed to generate test tweet: ' + error.message;
                    }
                }, 30000);
                
                // Hide initial status message after 3 seconds
                setTimeout(() => {
                    statusDiv.classList.add('hidden');
                }, 3000);
                
            } catch (error) {
                // Show error message
                statusDiv.className = 'mb-4 p-4 rounded bg-red-100 text-red-800';
                statusDiv.classList.remove('hidden');
                statusDiv.textContent = 'Failed to enable test mode: ' + error.message;
                
                setTimeout(() => {
                    statusDiv.classList.add('hidden');
                }, 3000);
            }
        }

        async function refreshTrends() {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.className = 'mb-4 p-4 rounded';
            statusDiv.classList.remove('hidden');
            statusDiv.classList.add('bg-blue-100', 'text-blue-800');
            statusDiv.textContent = 'Refreshing trends...';

            try {
                const response = await axios.get('/api/trends?refresh=true');
                
                if (response.data.error) {
                    statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                    statusDiv.classList.add('bg-red-100', 'text-red-800');
                    statusDiv.textContent = 'Failed to refresh trends: ' + response.data.error;
                    return;
                }

                updateTrendDisplay(response.data);

                statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                statusDiv.classList.add('bg-green-100', 'text-green-800');
                statusDiv.textContent = 'Trends refreshed successfully!';
                
                setTimeout(() => {
                    statusDiv.classList.add('hidden');
                }, 3000);
            } catch (error) {
                statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                statusDiv.classList.add('bg-red-100', 'text-red-800');
                statusDiv.textContent = 'Failed to refresh trends: ' + error.message;
            }
        }

        async function resetSequence() {
            try {
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.className = 'mb-4 p-4 rounded';
                statusDiv.classList.remove('hidden');
                statusDiv.classList.add('bg-blue-100', 'text-blue-800');
                statusDiv.textContent = 'Resetting sequence...';

                const response = await axios.post('/dashboard/reset');
                
                if (response.data.success) {
                    // Update UI
                    statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                    statusDiv.classList.add('bg-green-100', 'text-green-800');
                    statusDiv.textContent = 'Sequence reset. Starting from Pakistan in 1 hour.';
                    
                    // Force immediate updates
                    await Promise.all([
                        updateTimers(),
                        updateRandomTweetSchedule(),
                        loadTrends()
                    ]);
                    
                    // Hide status message after 3 seconds
                    setTimeout(() => {
                        statusDiv.classList.add('hidden');
                    }, 3000);
                } else {
                    throw new Error(response.data.message || 'Reset failed');
                }
            } catch (error) {
                console.error('Reset error:', error);
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.className = 'mb-4 p-4 rounded bg-red-100 text-red-800';
                statusDiv.classList.remove('hidden');
                statusDiv.textContent = 'Failed to reset sequence: ' + (error.response?.data?.message || error.message || 'Unknown error');
            }
        }
    </script>
</body>
</html> 