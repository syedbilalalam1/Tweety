<!DOCTYPE html>
<html>
<head>
    <title>{{title}}</title>
    <!-- Remove integrity check and use a different CDN -->
    <link href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <!-- Enhanced base styles -->
    <style>
        body {
            background-color: #f3f4f6;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
        }

        .button-fallback {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            margin: 0.5rem;
            border-radius: 0.375rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .pause-button { 
            background-color: #EAB308; 
            color: white;
            border: 2px solid #CA8A04;
        }
        .pause-button:hover { 
            background-color: #CA8A04; 
        }

        .reset-button { 
            background-color: #EF4444; 
            color: white;
            border: 2px solid #DC2626;
        }
        .reset-button:hover { 
            background-color: #DC2626; 
        }

        .generate-button { 
            background-color: #8B5CF6; 
            color: white;
            border: 2px solid #7C3AED;
        }
        .generate-button:hover { 
            background-color: #7C3AED; 
        }

        .card {
            background-color: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 1rem;
        }

        .grid {
            display: grid;
            gap: 1rem;
        }

        .grid-cols-4 {
            grid-template-columns: repeat(4, 1fr);
        }

        .grid-cols-6 {
            grid-template-columns: repeat(6, 1fr);
        }

        .timer-card {
            background-color: #f9fafb;
            border-radius: 0.5rem;
            padding: 1rem;
            text-align: center;
        }

        .timer-value {
            font-family: monospace;
            font-size: 1.25rem;
            margin-top: 0.5rem;
        }

        .status-message {
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }

        .status-success {
            background-color: #ecfdf5;
            color: #065f46;
        }

        .status-error {
            background-color: #fef2f2;
            color: #991b1b;
        }

        .status-warning {
            background-color: #fffbeb;
            color: #92400e;
        }

        .flex {
            display: flex;
        }

        .justify-between {
            justify-content: space-between;
        }

        .items-center {
            align-items: center;
        }

        .font-bold {
            font-weight: 700;
        }

        .text-3xl {
            font-size: 1.875rem;
            line-height: 2.25rem;
        }

        .mb-8 {
            margin-bottom: 2rem;
        }

        .space-x-4 > * + * {
            margin-left: 1rem;
        }

        .brand-header {
            background: linear-gradient(135deg, #1a237e 0%, #0d47a1 100%);
            color: white;
            padding: 1.5rem 0;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .brand-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .brand-link {
            color: #64b5f6;
            text-decoration: none;
            transition: color 0.2s;
        }

        .brand-link:hover {
            color: #90caf9;
            text-decoration: underline;
        }

        .brand-subtitle {
            color: #bbdefb;
            font-size: 1.1rem;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Brand Header -->
    <div class="brand-header">
        <div class="brand-container">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold">PersonalTweety Dashboard</h1>
                    <p class="brand-subtitle">
                        Created by <a href="https://bilalsworld.onrender.com/" target="_blank" class="brand-link">Syed Bilal Alam</a>
                    </p>
                </div>
                <div class="flex items-center space-x-4">
                    <a href="https://bilalsworld.onrender.com/" target="_blank" 
                       class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
                        Portfolio
                    </a>
                    <a href="/auth/logout" 
                       class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors">
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4 py-8">
        <!-- Control Buttons -->
        <div class="flex justify-end gap-4 mb-8">
            <button id="generateTweetButton" onclick="generateTrendingTweet()" 
                    class="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors">
                Generate Random Tweet
            </button>
            <button id="refreshTrendsButton" onclick="refreshTrends()" 
                    class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
                Refresh Trends
            </button>
            <button id="testModeButton" onclick="enableTestMode()" 
                    class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors">
                Enable 30s Test
            </button>
            <button id="pauseButton" onclick="togglePause()" 
                    class="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition-colors">
                Pause
            </button>
            <button id="resetButton" onclick="resetSequence()" 
                    class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors">
                Reset
            </button>
        </div>

        <!-- Next Trending Tweet Schedule -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-xl font-semibold mb-4">Next Trending Tweet Schedule</h2>
            <div class="grid grid-cols-4 gap-4">
                <div class="text-center p-4 rounded-lg" id="pakistanTimerCard">
                    <div class="font-semibold mb-2">Pakistan</div>
                    <div id="pakistanTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="usaTimerCard">
                    <div class="font-semibold mb-2">United States</div>
                    <div id="usaTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="japanTimerCard">
                    <div class="font-semibold mb-2">Japan</div>
                    <div id="japanTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="indiaTimerCard">
                    <div class="font-semibold mb-2">India</div>
                    <div id="indiaTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="indonesiaTimerCard">
                    <div class="font-semibold mb-2">Indonesia</div>
                    <div id="indonesiaTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="ukTimerCard">
                    <div class="font-semibold mb-2">United Kingdom</div>
                    <div id="ukTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="brazilTimerCard">
                    <div class="font-semibold mb-2">Brazil</div>
                    <div id="brazilTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="turkeyTimerCard">
                    <div class="font-semibold mb-2">Turkey</div>
                    <div id="turkeyTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="mexicoTimerCard">
                    <div class="font-semibold mb-2">Mexico</div>
                    <div id="mexicoTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="franceTimerCard">
                    <div class="font-semibold mb-2">France</div>
                    <div id="franceTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="saudiTimerCard">
                    <div class="font-semibold mb-2">Saudi Arabia</div>
                    <div id="saudiTimer" class="text-lg font-mono">--:--:--</div>
                </div>
                <div class="text-center p-4 rounded-lg" id="canadaTimerCard">
                    <div class="font-semibold mb-2">Canada</div>
                    <div id="canadaTimer" class="text-lg font-mono">--:--:--</div>
                </div>
            </div>
        </div>

        <!-- Random Tweet Schedule -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-xl font-semibold mb-4">Random Tweet Schedule (6 per day)</h2>
            <div class="grid grid-cols-6 gap-4" id="randomTweetSchedule">
                <!-- Will be populated by JavaScript -->
            </div>
        </div>

        <!-- Current Trending Topics -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">Current Trending Topics</h2>
            <div class="grid grid-cols-4 gap-4" id="trendingTopics">
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Pakistan</h3>
                    <div id="pakistanTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">United States</h3>
                    <div id="usaTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Japan</h3>
                    <div id="japanTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">India</h3>
                    <div id="indiaTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Indonesia</h3>
                    <div id="indonesiaTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">United Kingdom</h3>
                    <div id="ukTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Brazil</h3>
                    <div id="brazilTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Turkey</h3>
                    <div id="turkeyTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Mexico</h3>
                    <div id="mexicoTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">France</h3>
                    <div id="franceTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Saudi Arabia</h3>
                    <div id="saudiTrend" class="text-sm">Loading...</div>
                </div>
                <div class="p-4 rounded-lg bg-gray-50">
                    <h3 class="font-semibold mb-2">Canada</h3>
                    <div id="canadaTrend" class="text-sm">Loading...</div>
                </div>
            </div>
        </div>

        <!-- Status Messages -->
        <div id="statusMessage" class="hidden mb-4 p-4 rounded"></div>
        
        <!-- Tweet History -->
        <div class="grid grid-cols-1 gap-6">
            {{#if tweets.length}}
                {{#each tweets}}
                <div class="bg-white rounded-lg shadow p-6 {{#if (eq status 'failed')}}border-l-4 border-red-500{{else}}border-l-4 border-green-500{{/if}}">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <span class="text-sm text-gray-500">{{timestamp}}</span>
                            {{#if country}}
                            <span class="ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded">{{country}}</span>
                            {{/if}}
                        </div>
                        <span class="px-2 py-1 text-sm rounded {{#if (eq status 'failed')}}bg-red-100 text-red-800{{else}}bg-green-100 text-green-800{{/if}}">
                            {{status}}
                        </span>
                    </div>
                    
                    <div class="mb-4">
                        <h3 class="text-lg font-semibold mb-2">Tweet Content</h3>
                        <pre class="bg-gray-50 p-4 rounded whitespace-pre-wrap">{{content}}</pre>
                    </div>

                    {{#if error}}
                    <div class="mt-4 p-4 bg-red-50 rounded">
                        <h4 class="text-red-800 font-semibold">Error</h4>
                        <p class="text-red-600">{{error}}</p>
                    </div>
                    {{/if}}

                    <div class="mt-4 flex gap-2">
                        <span class="px-2 py-1 text-sm bg-blue-100 text-blue-800 rounded">
                            {{type}}
                        </span>
                        {{#if hashtag}}
                        <span class="px-2 py-1 text-sm bg-purple-100 text-purple-800 rounded">
                            {{hashtag}}
                        </span>
                        {{/if}}
                    </div>
                </div>
                {{/each}}
            {{else}}
                <div class="bg-white rounded-lg shadow p-6 text-center">
                    <p class="text-gray-500">No tweets generated yet. Use the buttons above to generate tweets or wait for the scheduled generation.</p>
                </div>
            {{/if}}
        </div>
    </div>

    <script>
        const countrySchedule = [
            { name: 'Pakistan', id: 'pakistan' },
            { name: 'United States', id: 'usa' },
            { name: 'Japan', id: 'japan' },
            { name: 'India', id: 'india' },
            { name: 'Indonesia', id: 'indonesia' },
            { name: 'United Kingdom', id: 'uk' },
            { name: 'Brazil', id: 'brazil' },
            { name: 'Turkey', id: 'turkey' },
            { name: 'Mexico', id: 'mexico' },
            { name: 'France', id: 'france' },
            { name: 'Saudi Arabia', id: 'saudi' },
            { name: 'Canada', id: 'canada' }
        ];

        // Store the current active country index and state in localStorage
        function getCurrentCountryIndex() {
            const stored = localStorage.getItem('currentCountryIndex');
            return stored ? parseInt(stored) : 0;
        }

        function setCurrentCountryIndex(index) {
            if (index === null || index === undefined) {
                index = 0;
            }
            localStorage.setItem('currentCountryIndex', index.toString());
        }

        function getLastPostTime() {
            const time = localStorage.getItem('lastPostTime');
            return time ? parseInt(time) : null;
        }

        function setLastPostTime(time) {
            if (time === null) {
                localStorage.removeItem('lastPostTime');
            } else {
                localStorage.setItem('lastPostTime', time.toString());
            }
        }

        function getStartTime() {
            const time = localStorage.getItem('startTime');
            return time ? parseInt(time) : null;
        }

        function setStartTime(time) {
            if (!time) {
                const now = new Date();
                const nextHour = new Date(now);
                nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
                time = nextHour.getTime();
            }
            localStorage.setItem('startTime', time.toString());
            localStorage.setItem('currentCountryIndex', '0'); // Reset index when setting new start time
        }

        function getLastTrendRefresh() {
            return localStorage.getItem('lastTrendRefresh');
        }

        function setLastTrendRefresh(time) {
            localStorage.setItem('lastTrendRefresh', time.toString());
        }

        async function loadTrends() {
            try {
                // Check localStorage cache first
                const cachedData = localStorage.getItem('cachedTrends');
                const lastRefresh = localStorage.getItem('lastTrendRefresh');
                const now = Date.now();
                const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache

                // Use cache if available and not expired
                if (cachedData && lastRefresh && (now - parseInt(lastRefresh) < CACHE_DURATION)) {
                    console.log('Using cached trends, age:', Math.floor((now - parseInt(lastRefresh)) / 1000 / 60), 'minutes');
                    updateTrendDisplay(JSON.parse(cachedData));
                    return;
                }

                console.log('Cache expired or not found, fetching fresh trends...');
                const response = await axios.get('/api/trends');
                
                if (response.data.error) {
                    console.error('Failed to fetch trends:', response.data.error);
                    showTrendError(response.data.error);
                    return;
                }

                localStorage.setItem('cachedTrends', JSON.stringify(response.data));
                localStorage.setItem('lastTrendRefresh', now.toString());
                updateTrendDisplay(response.data);
            } catch (error) {
                console.error('Error loading trends:', error);
                
                // On error, try to use cached data even if expired
                const cachedData = localStorage.getItem('cachedTrends');
                if (cachedData) {
                    console.log('Error fetching trends, using last known cached data');
                    updateTrendDisplay(JSON.parse(cachedData));
                } else {
                    showTrendError(error.message);
                }
            }
        }

        async function refreshTrends() {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.className = 'mb-4 p-4 rounded';
            statusDiv.classList.remove('hidden');
            statusDiv.classList.add('bg-blue-100', 'text-blue-800');
            statusDiv.textContent = 'Refreshing trends...';

            try {
                // Force a fresh fetch by clearing the cache
                localStorage.removeItem('cachedTrends');
                localStorage.removeItem('lastTrendRefresh');
                
                const response = await axios.get('/api/trends');
                if (response.data.error) {
                    statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                    statusDiv.classList.add('bg-red-100', 'text-red-800');
                    statusDiv.textContent = 'Failed to refresh trends: ' + response.data.error;
                    return;
                }

                localStorage.setItem('cachedTrends', JSON.stringify(response.data));
                localStorage.setItem('lastTrendRefresh', Date.now().toString());
                updateTrendDisplay(response.data);

                statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                statusDiv.classList.add('bg-green-100', 'text-green-800');
                statusDiv.textContent = 'Trends refreshed successfully!';
                
                setTimeout(() => {
                    statusDiv.classList.add('hidden');
                }, 3000);
            } catch (error) {
                statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                statusDiv.classList.add('bg-red-100', 'text-red-800');
                statusDiv.textContent = 'Failed to refresh trends: ' + error.message;
            }
        }

        function updateTrendDisplay(trends) {
            countrySchedule.forEach(country => {
                const trendElement = document.getElementById(`${country.id}Trend`);
                if (!trendElement) return;

                const trend = trends[country.id];
                if (!trend) {
                    trendElement.textContent = 'No trends available';
                    trendElement.classList.add('text-yellow-600');
                    return;
                }

                if (trend.error) {
                    trendElement.textContent = trend.error;
                    trendElement.classList.add('text-yellow-600');
                    return;
                }

                if (trend.name === 'Refreshing trends...') {
                    trendElement.textContent = 'Refreshing trends...';
                    trendElement.classList.add('text-blue-600');
                    return;
                }

                // Clear any previous styling
                trendElement.classList.remove('text-yellow-600', 'text-red-600', 'text-blue-600');
                
                // Display the trend
                let trendHtml = trend.name;
                if (trend.volume && trend.volume > 0) {
                    trendHtml += `<div class="text-xs text-gray-500 mt-1">Volume: ${trend.volume.toLocaleString()}</div>`;
                }
                trendElement.innerHTML = trendHtml;
            });
        }

        function showTrendError(message) {
            countrySchedule.forEach(country => {
                const trendElement = document.getElementById(`${country.id}Trend`);
                if (trendElement) {
                    trendElement.textContent = message || 'Error fetching trends';
                    trendElement.classList.remove('text-yellow-600', 'text-blue-600');
                    trendElement.classList.add('text-red-600');
                }
            });
        }

        function updateTimers() {
            const now = new Date().getTime();
            const startTime = getStartTime();
            
            if (!startTime) {
                setStartTime();
                return;
            }

            // If we're past the start time, calculate the next sequence start
            if (now > startTime) {
                const timePassed = now - startTime;
                const isTestMode = timePassed < 60000; // Less than 1 minute indicates test mode
                
                if (isTestMode && timePassed >= 30000) { // 30 seconds passed in test mode
                    // Move to next country
                    const currentIndex = getCurrentCountryIndex();
                    const nextIndex = (currentIndex + 1) % countrySchedule.length;
                    setCurrentCountryIndex(nextIndex);
                    
                    // Set new start time to next hour (or 30 seconds if continuing test mode)
                    const nextStart = now + 3600000; // Always set to next hour after test mode
                    setStartTime(nextStart);
                    
                    // Refresh the page to update the sequence
                    window.location.reload();
                    return;
                } else if (!isTestMode && timePassed >= 3600000) { // Normal mode: 1 hour passed
                    const hoursPassed = Math.floor(timePassed / 3600000);
                    const currentIndex = getCurrentCountryIndex();
                    const nextIndex = (currentIndex + 1) % countrySchedule.length;
                    setCurrentCountryIndex(nextIndex);
                    
                    const nextStart = startTime + (Math.ceil(hoursPassed) * 3600000);
                    setStartTime(nextStart);
                    
                    // Refresh the page to update the sequence
                    window.location.reload();
                    return;
                }
            }

            const currentIndex = getCurrentCountryIndex();
            
            countrySchedule.forEach((country, index) => {
                const timerElement = document.getElementById(`${country.id}Timer`);
                const cardElement = document.getElementById(`${country.id}TimerCard`);
                
                if (!timerElement || !cardElement) return;

                // Reset all card styles first
                cardElement.classList.remove('bg-yellow-50', 'bg-blue-50', 'bg-gray-50', 'bg-red-50', 'bg-green-50');

                if (index < currentIndex) {
                    // Already processed countries
                    timerElement.innerHTML = `
                        <div class="font-semibold text-green-600">Posted</div>
                        <div class="text-xs text-gray-500 mt-1">Completed</div>
                    `;
                    cardElement.classList.add('bg-green-50');
                } else if (index === currentIndex) {
                    // Currently active country
                    const timeLeft = Math.max(0, Math.floor((startTime - now) / 1000));
                    if (timeLeft === 0) {
                        // Time's up - show processing
                        timerElement.innerHTML = `
                            <div class="font-semibold text-blue-600">Processing</div>
                            <div class="text-xs text-gray-500 mt-1">Generating tweet...</div>
                        `;
                        cardElement.classList.add('bg-blue-50');
                        
                        // Move to next country after a short delay
                        setTimeout(() => {
                            const nextIndex = (currentIndex + 1) % countrySchedule.length;
                            if (nextIndex === 0) {
                                // If we're going back to Pakistan (index 0), reset the sequence
                                const nextHour = new Date();
                                nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
                                setStartTime(nextHour.getTime());
                            }
                            setCurrentCountryIndex(nextIndex);
                            window.location.reload();
                        }, 2000);
                    } else {
                        // Show countdown
                        timerElement.textContent = formatTime(timeLeft);
                        cardElement.classList.add('bg-blue-50');
                    }
                } else {
                    // Upcoming countries
                    const waitHours = index - currentIndex;
                    const targetTime = startTime + (waitHours * 3600000); // Convert hours to milliseconds
                    const timeLeft = Math.max(0, Math.floor((targetTime - now) / 1000));
                    
                    timerElement.innerHTML = `
                        ${formatTime(timeLeft)}
                        <div class="text-xs text-gray-500 mt-1">${waitHours} hour${waitHours > 1 ? 's' : ''} in queue</div>
                    `;
                    cardElement.classList.add('bg-yellow-50');
                }
            });
        }

        // Add auto-refresh when timers update
        setInterval(() => {
            const currentIndex = getCurrentCountryIndex();
            const startTime = getStartTime();
            const now = new Date().getTime();
            
            if (startTime && now > startTime) {
                const hoursPassed = Math.floor((now - startTime) / (60 * 60 * 1000));
                if (hoursPassed >= 1) {
                    // Refresh the page when moving to next country
                    window.location.reload();
                }
            }
        }, 1000);

        // Add function to get tweet history
        function getTweetHistory() {
            const tweets = document.querySelectorAll('.tweet-history-item');
            return Array.from(tweets).map(tweet => ({
                country: tweet.dataset.country,
                status: tweet.dataset.status,
                timestamp: new Date(tweet.dataset.timestamp)
            }));
        }

        async function resetSequence() {
            try {
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.className = 'mb-4 p-4 rounded';
                statusDiv.classList.remove('hidden');
                statusDiv.classList.add('bg-blue-100', 'text-blue-800');
                statusDiv.textContent = 'Resetting sequence...';

                // Call backend reset
                const response = await axios.post('/dashboard/reset');
                
                if (response.data.success) {
                    // Reset all frontend state
                    localStorage.removeItem('currentCountryIndex');
                    localStorage.removeItem('lastPostTime');
                    localStorage.removeItem('isPaused');
                    
                    // Calculate and set new start time
                    const now = new Date();
                    const nextHour = new Date(now);
                    nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
                    setStartTime(nextHour.getTime());
                    
                    // Reset country index to Pakistan (0)
                    setCurrentCountryIndex(0);
                    
                    // Reset pause state
                    setPaused(false);
                    
                    // Reset random tweet schedule
                    initializeRandomSchedule();
                    
                    // Update UI
                    statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                    statusDiv.classList.add('bg-green-100', 'text-green-800');
                    statusDiv.textContent = 'Sequence reset. Starting from Pakistan in 1 hour.';
                    
                    // Force immediate timer updates
                    updateTimers();
                    updateRandomTweetSchedule();
                    
                    // Hide status message after 3 seconds
                    setTimeout(() => {
                        statusDiv.classList.add('hidden');
                    }, 3000);
                } else {
                    throw new Error(response.data.message || 'Reset failed');
                }
            } catch (error) {
                console.error('Reset error:', error);
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.className = 'mb-4 p-4 rounded bg-red-100 text-red-800';
                statusDiv.classList.remove('hidden');
                statusDiv.textContent = 'Failed to reset sequence: ' + (error.response?.data?.message || error.message || 'Unknown error');
            }
        }

        function formatTime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize random schedule if needed
            if (!getRandomTweetSchedule().length) {
                initializeRandomSchedule();
            }
            
            // Load trends once at startup
            loadTrends();
            
            // Initialize timers
            updateTimers();
            setInterval(updateTimers, 1000);
            
            // Initialize random tweet schedule and update every second
            updateRandomTweetSchedule();
            setInterval(updateRandomTweetSchedule, 1000);
            
            // Initialize pause state
            setPaused(isPaused());
        });

        // Add pause state management
        function isPaused() {
            return localStorage.getItem('isPaused') === 'true';
        }

        function setPaused(paused) {
            localStorage.setItem('isPaused', paused);
            const pauseButton = document.getElementById('pauseButton');
            if (paused) {
                pauseButton.textContent = 'Resume';
                pauseButton.classList.remove('bg-yellow-500', 'hover:bg-yellow-600');
                pauseButton.classList.add('bg-green-500', 'hover:bg-green-600');
            } else {
                pauseButton.textContent = 'Pause';
                pauseButton.classList.remove('bg-green-500', 'hover:bg-green-600');
                pauseButton.classList.add('bg-yellow-500', 'hover:bg-yellow-600');
            }
        }

        // Store random tweet schedule in localStorage
        function setRandomTweetSchedule(schedule) {
            localStorage.setItem('randomTweetSchedule', JSON.stringify(schedule));
        }

        function getRandomTweetSchedule() {
            try {
                const stored = localStorage.getItem('randomTweetSchedule');
                return stored ? JSON.parse(stored) : [];
            } catch (error) {
                console.error('Error parsing random tweet schedule:', error);
                return [];
            }
        }

        // Initialize random tweet schedule if not exists or if all tweets are posted
        function initializeRandomSchedule() {
            const now = new Date();
            const schedule = [];
            const usedHours = new Set();
            
            // Generate 6 random times within the next 24 hours
            // Ensure at least 2 hours between tweets
            for (let i = 0; i < 6; i++) {
                let hour;
                do {
                    hour = Math.floor(Math.random() * 24);
                } while (usedHours.has(hour) || 
                        Array.from(usedHours).some(h => Math.abs(h - hour) < 2));
                
                usedHours.add(hour);
                
                const time = new Date(now);
                time.setHours(hour);
                time.setMinutes(Math.floor(Math.random() * 60));
                time.setSeconds(0);
                time.setMilliseconds(0);
                
                // If the time has already passed today, schedule for tomorrow
                if (time < now) {
                    time.setDate(time.getDate() + 1);
                }
                
                schedule.push({
                    time: time.getTime(),
                    posted: false,
                    scheduledTime: time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
                });
            }
            
            // Sort by time and store
            const sortedSchedule = schedule.sort((a, b) => a.time - b.time);
            setRandomTweetSchedule(sortedSchedule);
            return sortedSchedule;
        }

        // Check if all tweets are posted and need rescheduling
        function checkAndRescheduleIfNeeded() {
            const schedule = getRandomTweetSchedule();
            if (!schedule.length || schedule.every(tweet => tweet.posted)) {
                console.log('All tweets posted or no schedule exists, generating new schedule');
                return initializeRandomSchedule();
            }
            return schedule;
        }

        function updateRandomTweetSchedule() {
            let schedule = checkAndRescheduleIfNeeded();
            const container = document.getElementById('randomTweetSchedule');
            const now = new Date();
            
            container.innerHTML = '';
            
            schedule.forEach((tweet, index) => {
                const div = document.createElement('div');
                div.className = 'text-center p-4 rounded-lg';
                
                if (tweet.posted) {
                    // Tweet has been posted
                    div.classList.add('bg-green-50', 'border', 'border-green-500');
                    div.innerHTML = `
                        <div class="font-semibold mb-2">Random ${index + 1}</div>
                        <div class="text-green-600 font-semibold">Posted</div>
                        <div class="text-xs text-gray-500 mt-1">${tweet.scheduledTime}</div>
                    `;
                } else {
                    // Tweet is pending
                    const tweetTime = new Date(tweet.time);
                    
                    if (tweetTime < now) {
                        // Mark as posted if the time has passed
                        schedule[index].posted = true;
                        setRandomTweetSchedule(schedule);
                        
                        // Call backend to post the tweet
                        axios.post('/api/generate/random')
                            .then(response => {
                                console.log('Random tweet posted successfully');
                            })
                            .catch(error => {
                                console.error('Failed to post random tweet:', error);
                            });
                        
                        div.classList.add('bg-green-50', 'border', 'border-green-500');
                        div.innerHTML = `
                            <div class="font-semibold mb-2">Random ${index + 1}</div>
                            <div class="text-green-600 font-semibold">Just Posted</div>
                            <div class="text-xs text-gray-500 mt-1">${tweet.scheduledTime}</div>
                        `;
                    } else {
                        // Show countdown
                        const remainingTime = tweetTime.getTime() - now.getTime();
                        const hours = Math.floor(remainingTime / (1000 * 60 * 60));
                        const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
                        const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);
                        
                        div.classList.add('bg-gray-50');
                        div.innerHTML = `
                            <div class="font-semibold mb-2">Random ${index + 1}</div>
                            <div class="text-lg font-mono">${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}</div>
                            <div class="text-xs text-gray-500 mt-1">${tweet.scheduledTime}</div>
                        `;
                    }
                }
                
                container.appendChild(div);
            });
        }

        async function generateTrendingTweet() {
            try {
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.className = 'mb-4 p-4 rounded';
                statusDiv.classList.remove('hidden');
                statusDiv.classList.add('bg-blue-100', 'text-blue-800');
                statusDiv.textContent = 'Generating random tweet...';

                const button = document.getElementById('generateTweetButton');
                button.disabled = true;
                button.classList.add('opacity-50', 'cursor-not-allowed');

                const response = await axios.post('/api/generate/random');
                
                if (response.data.success) {
                    statusDiv.classList.remove('bg-blue-100', 'text-blue-800');
                    statusDiv.classList.add('bg-green-100', 'text-green-800');
                    statusDiv.textContent = response.data.message || 'Tweet generated successfully!';
                    
                    // Refresh the page after 2 seconds to show the new tweet
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    throw new Error(response.data.message || 'Failed to generate tweet');
                }
            } catch (error) {
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.className = 'mb-4 p-4 rounded bg-red-100 text-red-800';
                statusDiv.classList.remove('hidden');
                statusDiv.textContent = 'Failed to generate tweet: ' + (error.response?.data?.message || error.message);
            } finally {
                // Re-enable the button after 1 minute
                setTimeout(() => {
                    const button = document.getElementById('generateTweetButton');
                    button.disabled = false;
                    button.classList.remove('opacity-50', 'cursor-not-allowed');
                }, 60000);
            }
        }

        // Add test mode functions
        async function enableTestMode() {
            const statusDiv = document.getElementById('statusMessage');
            const testButton = document.getElementById('testModeButton');
            
            try {
                const now = new Date();
                const currentStartTime = getStartTime();
                
                if (!currentStartTime) {
                    throw new Error('No active sequence');
                }

                // Set new start time to 30 seconds from now
                const newStartTime = now.getTime() + 30000; // 30 seconds
                setStartTime(newStartTime);
                
                // Update button state
                testButton.textContent = 'Test Mode Active';
                testButton.classList.remove('bg-green-500', 'hover:bg-green-600');
                testButton.classList.add('bg-orange-500', 'hover:bg-orange-600');
                testButton.disabled = true;
                
                // Show status message
                statusDiv.className = 'mb-4 p-4 rounded bg-orange-100 text-orange-800';
                statusDiv.classList.remove('hidden');
                statusDiv.textContent = 'Test mode activated: Current timer reduced to 30 seconds';

                // Generate initial tweet for current country
                try {
                    const response = await axios.post('/api/generate/trend');
                    if (!response.data.success) {
                        throw new Error(response.data.message || 'Failed to generate tweet');
                    }
                } catch (error) {
                    console.error('Failed to generate initial test tweet:', error);
                }
                
                // Set timer for the next tweet after 30 seconds
                setTimeout(async () => {
                    try {
                        // Generate the next tweet
                        const response = await axios.post('/api/generate/trend');
                        if (!response.data.success) {
                            throw new Error(response.data.message || 'Failed to generate tweet');
                        }
                        
                        // Reset button state
                        testButton.textContent = 'Enable 30s Test';
                        testButton.classList.remove('bg-orange-500', 'hover:bg-orange-600');
                        testButton.classList.add('bg-green-500', 'hover:bg-green-600');
                        testButton.disabled = false;
                        
                        // Show success message
                        statusDiv.className = 'mb-4 p-4 rounded bg-green-100 text-green-800';
                        statusDiv.textContent = 'Test mode completed successfully';
                        
                        // Refresh the page after a short delay
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } catch (error) {
                        console.error('Failed to generate test tweet:', error);
                        statusDiv.className = 'mb-4 p-4 rounded bg-red-100 text-red-800';
                        statusDiv.textContent = 'Failed to generate test tweet: ' + error.message;
                    }
                }, 30000);
                
                // Hide initial status message after 3 seconds
                setTimeout(() => {
                    statusDiv.classList.add('hidden');
                }, 3000);
                
            } catch (error) {
                // Show error message
                statusDiv.className = 'mb-4 p-4 rounded bg-red-100 text-red-800';
                statusDiv.classList.remove('hidden');
                statusDiv.textContent = 'Failed to enable test mode: ' + error.message;
                
                setTimeout(() => {
                    statusDiv.classList.add('hidden');
                }, 3000);
            }
        }
    </script>
</body>
</html> 
